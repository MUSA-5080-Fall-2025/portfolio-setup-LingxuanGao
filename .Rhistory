quarto render
quarto render
quarto render
library(dplyr)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
View(car_data)
View(car_df)
View(car_data)
View(car_df)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("55588cff24a2b44b2f030ee1581c8d854c1839da", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "Pennsylvania"
**State Selection:** I have chosen **[Pennsylvania]** for this analysis because: [Because it's where I am.]
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("55588cff24a2b44b2f030ee1581c8d854c1839da", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "Pennsylvania"
# Write your get_acs() code here
county_data <- get_acs(
geography = "county level",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("55588cff24a2b44b2f030ee1581c8d854c1839da", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "Pennsylvania"
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
# Clean the county names to remove state name and "County"
county_data <- county_data %>%
mutate(NAME = str_remove(NAME, " County, Pennsylvania"))
# Hint: use mutate() with str_remove()
# Display the first few rows
head(county_data)
# Create table of top 5 counties by MOE percentage
# Format as table with kable() - include appropriate column names and caption
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
# Define your race/ethnicity variables with descriptive names
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
# Create a nicely formatted table of your results using kable()
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
```{r income-reliability}
```{r income-reliability}
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("55588cff24a2b44b2f030ee1581c8d854c1839da", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "Pennsylvania"
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
# Clean the county names to remove state name and "County"
county_data <- county_data %>%
mutate(NAME = str_remove(NAME, " County, Pennsylvania"))
# Hint: use mutate() with str_remove()
# Display the first few rows
head(county_data)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(
moe_pct_income = median_incomeM / median_incomeE * 100,
reliability = case_when(
moe_pct_income < 5 ~ "High Confidence",
moe_pct_income >= 5 & moe_pct_income <= 10 ~ "Moderate Confidence",
moe_pct_income > 10 ~ "Low Confidence"
),
unreliable_flag = moe_pct_income > 10   # TRUE if MOE > 10%
)
# Create a summary showing count of counties in each reliability category
reliability_summary <- county_data %>%
count(reliability) %>%
mutate(percentage = n / sum(n) * 100)
reliability_summary
# Create table of top 5 counties by MOE percentage
# Format as table with kable() - include appropriate column names and caption
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
# Define your race/ethnicity variables with descriptive names
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
# Create a nicely formatted table of your results using kable()
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
# Create table of top 5 counties by MOE percentage
top5_uncertain <- county_data %>%
arrange(desc(moe_pct_income)) %>%
slice(1:5) %>%
select(NAME, median_incomeE, median_incomeM, moe_pct_income, reliability)
# Format as table with kable() - include appropriate column names and caption
knitr::kable(
top5_uncertain,
digits = 2,
caption = "Top 5 Counties with Highest Income Estimate Uncertainty"
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- bind_rows(
county_data %>% filter(moe_pct_income < 5) %>% slice(1),     # High
county_data %>% filter(moe_pct_income >= 5 & moe_pct_income <= 10) %>% slice(1),  # Moderate
county_data %>% filter(moe_pct_income > 10) %>% slice(1)     # Low
)
# Display the selected counties with their key characteristics
knitr::kable(
selected_counties %>%
select(NAME, median_incomeE, moe_pct_income, reliability),
digits = 2,
col.names = c("County", "Median Income", "MOE %", "Reliability"),
caption = "Selected Counties by MOE Percentage (Different Confidence Levels)"
)
# Show: county name, median income, MOE percentage, reliability category
View(top5_uncertain)
View(reliability_summary)
View(selected_counties)
View(top5_uncertain)
View(county_data)
View(county_data)
View(reliability_summary)
View(selected_counties)
View(county_data)
# Define your race/ethnicity variables with descriptive names
race_vars <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total_pop = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
tract_demo <- get_acs(
geography = "tract",
variables = race_vars,
year = 2022,
survey = "acs5",
state = my_state,
county = c("001", "023"),
output = "wide"
)
# Hint: You may need to specify county codes in the county parameter
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
tract_demo <- tract_demo %>%
mutate(
pct_white = (whiteE / total_popE) * 100,
pct_black = (blackE / total_popE) * 100,
pct_hispanic = (hispanicE / total_popE) * 100
)
# Add readable tract and county name columns using str_extract() or similar
library(stringr)
tract_demo <- tract_demo %>%
mutate(
county_code = str_extract(GEOID, "(?<=^..)..."),   # 前2位是州，后3位是县
tract_code  = str_extract(GEOID, "(?<=^.....).*")  # 从第6位开始都是tract
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_demo %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(county_name, tract_code, pct_hispanic, pct_white, pct_black)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_demo %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(county_code, tract_code, pct_hispanic, pct_white, pct_black)
# Calculate average demographics by county using group_by() and summarize()
county_demographics <- tract_demo %>%
group_by(county_code) %>%
summarize(
tracts = n(),
avg_white = mean(pct_white, na.rm = TRUE),
avg_black = mean(pct_black, na.rm = TRUE),
avg_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Show: number of tracts, average percentage for each racial/ethnic group
# Create a nicely formatted table of your results using kable()
knitr::kable(
county_demographics,
digits = 1,
col.names = c("County Code", "Tracts", "Avg % White", "Avg % Black", "Avg % Hispanic"),
caption = "Average Demographics by County (Selected Counties)"
)
top_hispanic_tract
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_demo <- tract_demo %>%
mutate(
moe_pct_white    = (whiteM / whiteE) * 100,
moe_pct_black    = (blackM / blackE) * 100,
moe_pct_hispanic = (hispanicM / hispanicE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_demo <- tract_demo %>%
mutate(
high_moe_flag = ifelse(
moe_pct_white > 15 | moe_pct_black > 15 | moe_pct_hispanic > 15,
TRUE, FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
moe_summary <- tract_demo %>%
summarize(
total_tracts = n(),
tracts_high_moe = sum(high_moe_flag, na.rm = TRUE),
pct_high_moe = (tracts_high_moe / total_tracts) * 100
)
moe_summary
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
pattern_summary <- tract_demo %>%
group_by(high_moe_flag) %>%
summarize(
tracts = n(),
avg_pop = mean(total_popE, na.rm = TRUE),
avg_white = mean(pct_white, na.rm = TRUE),
avg_black = mean(pct_black, na.rm = TRUE),
avg_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Create a professional table showing the patterns
knitr::kable(
pattern_summary,
digits = 1,
col.names = c("High MOE?", "Tracts", "Avg Population", "Avg % White", "Avg % Black", "Avg % Hispanic"),
caption = "Community Characteristics by Data Reliability"
)
